//app/teams/[id].tsx
import { useDesign } from '@/context/DesignSystem';
import { useAppTheme } from '@/context/ThemeContext';
import {db, storage} from '@/firebase/config';
import { getCurrentUser } from '@/services/authService';
import { sendNotification, sendPushNotification } from '@/services/notificationService';
import { showToast } from "@/utils/toast"; // ‚úÖ Ï∂îÍ∞Ä
import { Ionicons } from "@expo/vector-icons";
import * as Clipboard from 'expo-clipboard';
import { useLocalSearchParams, useRouter } from 'expo-router';
import {
    arrayRemove,
    collection,
    deleteDoc,
    doc,
    getDoc,
    getDocs,
    increment,
    onSnapshot,
    query,
    setDoc,
    updateDoc,
    where,
    writeBatch
, Timestamp } from 'firebase/firestore';
import React, { useEffect, useState } from 'react';
import {
    ActivityIndicator,
    Alert,
    KeyboardAvoidingView,
    Modal,
    Platform,
    RefreshControl,
    SafeAreaView,
    ScrollView,
    Share,
    StyleSheet,
    Text,
    TextInput,
    TouchableOpacity,
    TouchableWithoutFeedback,
    View, Image, Switch
} from 'react-native';
import Toast from "react-native-root-toast";
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import {Calendar} from "react-native-calendars";
import LottieView from 'lottie-react-native';

import loading4 from '@/assets/lottie/Animation - 1747201330128.json';
import loading3 from '@/assets/lottie/Animation - 1747201413764.json';
import loading2 from '@/assets/lottie/Animation - 1747201431992.json';
import loading1 from '@/assets/lottie/Animation - 1747201461030.json';

// Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏ ÏûÑÌè¨Ìä∏
import EditTeamModal from './teamDetailModal/EditTeamModal';
import VoteModal from './teamDetailModal/VoteModal';
import LocationModal from './teamDetailModal/LocationModal';
import DatePickerModal from './teamDetailModal/DatePickerModal';

type Team = {
    id: string;
    name: string;
    leader: string;
    leaderEmail: string;
    subLeaderEmail?: string; // Î∂ÄÎ™®ÏûÑÏû• Ïù¥Î©îÏùº Ï∂îÍ∞Ä
    members: number;
    capacity: number;
    membersList: string[];
    announcement?: string;
    scheduleDate?: string; // YYYY-MM-DD
    location?: string;
    meetingTime?: string;
    expirationDate?: any;
    thumbnail?: string;
    isClosed?: boolean;
    [key: string]: any; // Í∏∞ÌÉÄ ÌïÑÎìúÎ•º ÌóàÏö©ÌïòÎäî Í≤ΩÏö∞
};

type VoteStatus = 'yes' | 'no' | 'maybe';

type Vote = {
    userId: string;
    userName: string;
    status: VoteStatus;
    timestamp: number;
};

// Add this type for vote statistics
type VoteStats = {
    yes: number;
    no: number;
    maybe: number;
    total: number;
};

type Schedule = {
    date: string;
    createdAt: number;
    createdBy: string;
    creatorName: string;
    status: 'active' | 'cancelled';
};

export default function TeamDetail() {
    const { id } = useLocalSearchParams<{ id: string }>();
    const [team, setTeam] = useState<Team | null>(null);
    const [memberUsers, setMemberUsers] = useState<any[]>([]);
    const [loading, setLoading] = useState(true);
    const [user, setUser] = useState<any>(null);
    const router = useRouter();
    const { colors, font, spacing, radius } = useDesign();
    const { mode } = useAppTheme();
    const isDark = mode === 'dark';
    const [currentUser, setCurrentUser] = useState<any>(null);
    const isCreator = team?.leaderEmail === user?.email;
    const isSubLeader = team?.subLeaderEmail === user?.email;
    const isManager = isCreator || isSubLeader;
    const insets = useSafeAreaInsets();
    const [refreshing, setRefreshing] = useState(false);

    //ÏàòÏ†ï
    const [editModalVisible, setEditModalVisible] = useState(false);
    const [showVoteStatus, setShowVoteStatus] = useState(true);

    const [scheduleDate, setScheduleDate] = useState('');
    const [isDatePickerVisible, setDatePickerVisible] = useState(false);
    const [alreadyRequested, setAlreadyRequested] = useState(false);
    const [announcement, setAnnouncement] = useState('');

    const [chatBadgeCount, setChatBadgeCount] = useState(0);
    const [isVoteModalVisible, setVoteModalVisible] = useState(false);
    const [votes, setVotes] = useState<{ [key: string]: Vote }>({});
    const [myVote, setMyVote] = useState<VoteStatus | null>(null);
    const [isLocationModalVisible, setLocationModalVisible] = useState(false);
    const [loadingAnimation, setLoadingAnimation] = useState<any>(null);
    const loadingAnimations = [loading1, loading2, loading3, loading4];
    useEffect(() => {
        const random = Math.floor(Math.random() * loadingAnimations.length);
        setLoadingAnimation(loadingAnimations[random]);
    }, []);
    const randomLoadingAnimation = () => {
        const index = Math.floor(Math.random() * loadingAnimations.length);
        return loadingAnimations[index];
    };

    // handleCategorySelect Ìï®ÏàòÎäî EditTeamModal Ïª¥Ìè¨ÎÑåÌä∏Î°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§

    useEffect(() => {
        getCurrentUser().then(setCurrentUser);
    }, []);


    useEffect(() => {
        const unsubscribe = fetchTeam();
        return () => unsubscribe && unsubscribe();
    }, []);

    useEffect(() => {
        const checkJoinRequest = async () => {
            if (!user || !team) return;

            const q = query(
                collection(db, 'notifications'),
                where('type', '==', 'team_join_request'),
                where('teamId', '==', team.id),
                where('applicantEmail', '==', user.email),
            );

            const snap = await getDocs(q);
            if (!snap.empty) {
                setAlreadyRequested(true); // Ïù¥ÎØ∏ Ïã†Ï≤≠Ìïú ÏÉÅÌÉúÎ°ú Ï≤òÎ¶¨
            }
        };

        checkJoinRequest();
    }, [user, team]);

    // Add schedule and announcement subscription
    useEffect(() => {
        if (!id) return;

        // Subscribe to team document for schedule and announcement updates
        const teamRef = doc(db, 'teams', id);
        const unsubscribe = onSnapshot(teamRef, (docSnap) => {
            if (!docSnap.exists()) return;

            const teamData = docSnap.data();
            if (teamData.scheduleDate) {
                setScheduleDate(teamData.scheduleDate);
            }
            if (teamData.announcement !== undefined) {
                setAnnouncement(teamData.announcement);
            }
        });

        return () => unsubscribe();
    }, [id]);

// üîÑ API Ìò∏Ï∂ú Î°úÏßÅ Î∂ÑÎ¶¨
    const fetchTeam = () => {
        const teamRef = doc(db, 'teams', id);

        const unsubscribe = onSnapshot(teamRef, async (docSnap) => {
            if (!docSnap.exists()) return;

            const teamData = { id: docSnap.id, ...docSnap.data() } as Team;
            setTeam(teamData);

            try {
                const currentUser = await getCurrentUser();
                setUser(currentUser);

                const emails = Array.from(new Set(teamData.membersList || []));
                if (emails.length > 0) {
                    const batches = [];
                    const cloned = [...emails];
                    while (cloned.length) {
                        const batch = cloned.splice(0, 10);
                        batches.push(query(collection(db, 'users'), where('email', 'in', batch)));
                    }
                    const results = await Promise.all(batches.map(q => getDocs(q)));
                    const users = results.flatMap(snap => snap.docs.map(doc => doc.data()));
                    setMemberUsers(users);
                }
            } catch (e) {
                console.error('‚ùå ÏÇ¨Ïö©Ïûê/Î©§Î≤Ñ Ï†ïÎ≥¥ Î°úÎî© Ïã§Ìå®:', e);
            } finally {
                setLoading(false);     // ‚úÖ Î°úÎî© ÏôÑÎ£å Ï≤òÎ¶¨
                setRefreshing(false);  // ‚úÖ Î¶¨ÌîÑÎ†àÏãú ÏôÑÎ£å Ï≤òÎ¶¨
            }
        });

        return unsubscribe;
    };
    useEffect(() => {
        let unsubscribe: (() => void) | undefined;

        unsubscribe = fetchTeam();

        return () => {
            if (unsubscribe) unsubscribe();
        };
    }, []);

    useEffect(() => {
        const setupBadgeListener = async () => {
            if (!id) return; // `id`Îäî useLocalSearchParamsÏóêÏÑú Í∞ÄÏ†∏Ïò® ÌåÄ ID
            const user = await getCurrentUser();
            if (!user?.email) return;

            const badgeRef = doc(db, 'teams', id, 'chatBadge', user.email);
            const unsubscribe = onSnapshot(badgeRef, (snap) => {
                const count = snap.exists() ? snap.data()?.count || 0 : 0;
                // console.log('üì• Ïã§ÏãúÍ∞Ñ badge count:', count); // ‚úÖ ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏
                setChatBadgeCount(count);
            });

            return unsubscribe;
        };

        let unsubscribe: (() => void) | undefined;
        setupBadgeListener().then((unsub) => {
            unsubscribe = unsub;
        });

        return () => {
            if (unsubscribe) unsubscribe();
        };
    }, [id]); // team.id ÎåÄÏã† id ÏÇ¨Ïö©

    useEffect(() => {
        if (!team?.id || !scheduleDate || !user) return;

        const votesRef = collection(db, 'teams', team.id, 'scheduleVotes');
        const q = query(votesRef, where('scheduleDate', '==', scheduleDate));

        const unsubscribe = onSnapshot(q, (snapshot) => {
            const votesData: { [key: string]: Vote } = {};
            snapshot.docs.forEach((doc) => {
                votesData[doc.id] = doc.data() as Vote;

                // ‚úÖ Ìï¥Îãπ Î∂ÄÎ∂ÑÏù¥ ÌïµÏã¨: ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò Ìà¨Ìëú ÏÉÅÌÉúÎ•º Î∞òÏòÅ
                if (doc.id === user?.email) {
                    setMyVote(doc.data().status as VoteStatus);
                }
            });
            setVotes(votesData);
        });

        return () => unsubscribe();
    }, [team?.id, scheduleDate, user]);  // ‚úÖ userÎ•º ÏùòÏ°¥ÏÑ±Ïóê Ï∂îÍ∞Ä

    const handleJoin = async () => {
        if (!team || !user) return;

        if (team.membersList?.includes(user.email)) {
            Alert.alert('Ï∞∏Ïó¨ Î∂àÍ∞Ä', 'Ïù¥ÎØ∏ Í∞ÄÏûÖÎêú Î™®ÏûÑÏûÖÎãàÎã§.');
            return;
        }

        const isUnlimited = team.maxMembers === -1;

        if (!isUnlimited && (team.membersList?.length ?? 0) >= (team.maxMembers ?? 99)) {
            Alert.alert('Ïù∏Ïõê Ï¥àÍ≥º', 'Î™®ÏßëÏù¥ ÎßàÍ∞êÎêòÏóàÏäµÎãàÎã§.');
            return;
        }

        // ‚úÖ 1. Push ÌÜ†ÌÅ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (email Í∏∞Ï§ÄÏúºÎ°ú)
        const q = query(collection(db, 'expoTokens'), where('email', '==', team.leaderEmail));
        const snap = await getDocs(q);
        const tokens: string[] = snap.docs.map(doc => doc.data().token).filter(Boolean);

// ‚úÖ 2. Firestore ÏïåÎ¶º Ï†ÄÏû• (email Ï†ÄÏû•)
        await sendNotification({
            to: team.leaderEmail, // Firestore ÏïåÎ¶º Î∞õÎäî Ï£ºÏ≤¥(email)
            message: `${user.name}ÎãòÏù¥ "${team.name}" Î™®ÏûÑÏóê Í∞ÄÏûÖ Ïã†Ï≤≠ÌñàÏäµÎãàÎã§.`,
            type: 'team_join_request',
            link: '/notifications',
            teamId: team.id,
            teamName: team.name,
            applicantEmail: user.email,
            applicantName: user.name,
        });

// ‚úÖ 3. Expo Ìë∏Ïãú Ï†ÑÏÜ° (token Í∏∞Î∞ò)
        if (tokens.length > 0) {
            await sendPushNotification({
                to: tokens,
                title: 'üôã ÏÜåÎ™®ÏûÑ Í∞ÄÏûÖ Ïã†Ï≤≠',
                body: `${user.name}ÎãòÏù¥ "${team.name}" Î™®ÏûÑÏóê Í∞ÄÏûÖ Ïã†Ï≤≠ÌñàÏäµÎãàÎã§.`,
            });
        }

        showToast('‚úÖÍ∞ÄÏûÖ Ïã†Ï≤≠ ÏôÑÎ£å: Î™®ÏûÑÏû•ÏóêÍ≤å Ïã†Ï≤≠ Î©îÏãúÏßÄÎ•º Î≥¥ÎÉàÏäµÎãàÎã§.');
        fetchTeam();  // ‚úÖ Ï∂îÍ∞ÄÎêú Î∂ÄÎ∂Ñ
        // router.back();
    };

    const openEditModal = () => {
        setEditModalVisible(true);
    };

    // pickImageÏôÄ uploadImageToFirebase Ìï®ÏàòÎäî EditTeamModal Ïª¥Ìè¨ÎÑåÌä∏Î°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§

    // handleUpdateTeam Ìï®ÏàòÎäî EditTeamModal Ïª¥Ìè¨ÎÑåÌä∏Î°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§

    const handleKick = async (email: string) => {
        if (!team) return;

        // ‚úÖ Ïù¥Î©îÏùºÏóê Ìï¥ÎãπÌïòÎäî ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ Ï∞æÍ∏∞
        const member = memberUsers.find(m => m.email === email);
        const displayName = member?.name || email;

        Alert.alert('Ï†ïÎßê Í∞ïÌá¥ÌïòÏãúÍ≤†ÏäµÎãàÍπå?', displayName, [
            { text: 'Ï∑®ÏÜå', style: 'cancel' },
            {
                text: 'Í∞ïÌá¥', style: 'destructive', onPress: async () => {
                    try {
                        const teamRef = doc(db, 'teams', team.id);
                        await updateDoc(teamRef, {
                            membersList: arrayRemove(email),
                            members: increment(-1),
                        });

                        const updatedSnap = await getDoc(teamRef);
                        if (updatedSnap.exists()) {
                            const updatedData = updatedSnap.data();
                            setTeam({
                                id: updatedSnap.id,
                                name: updatedData.name,
                                leader: updatedData.leader,
                                leaderEmail: updatedData.leaderEmail,
                                members: updatedData.members,
                                capacity: updatedData.capacity,
                                membersList: updatedData.membersList,
                                ...updatedData, // Í∏∞ÌÉÄ ÌïÑÎìú
                            });
                        }

                        setMemberUsers(prev => prev.filter(m => m.email !== email));
                        fetchTeam();  // ‚úÖ Ï∂îÍ∞ÄÎêú Î∂ÄÎ∂Ñ
                        Alert.alert('Í∞ïÌá¥ ÏôÑÎ£å', `${displayName}ÎãòÏù¥ Í∞ïÌá¥ÎêòÏóàÏäµÎãàÎã§.`);
                    } catch (e) {
                        console.error('‚ùå Í∞ïÌá¥ Ïã§Ìå®:', e);
                        Alert.alert('ÏóêÎü¨', 'Í∞ïÌá¥Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                    }
                }
            }
        ]);
    };

    const deleteTeam = async (id: string) => {
        Alert.alert('ÏÇ≠Ï†ú ÌôïÏù∏', 'Ï†ïÎßêÎ°ú Ïù¥ ÏÜåÎ™®ÏûÑÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?', [
            { text: 'Ï∑®ÏÜå', style: 'cancel' },
            {
                text: 'ÏÇ≠Ï†ú',
                style: 'destructive',
                onPress: async () => {
                    try {
                        await deleteDoc(doc(db, 'teams', id));
                        setTeam(null); // ‚ùóÎã®Ïùº Í∞ùÏ≤¥ÎãàÍπå Ïù¥Î†áÍ≤å Ï≤òÎ¶¨
                        showToast('‚úÖÏÇ≠Ï†ú ÏôÑÎ£å: ÏÜåÎ™®ÏûÑÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
                        router.replace('/teams'); // ÏÇ≠Ï†ú ÌõÑ ÏÜåÎ™®ÏûÑ Î™©Î°ùÏúºÎ°ú Ïù¥Îèô
                    } catch (e) {
                        Alert.alert('Ïò§Î•ò', 'ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                        console.error(e);
                    }
                },
            },
        ]);
    };

    // handleDateConfirmÏôÄ handleScheduleUpdate Ìï®ÏàòÎäî DatePickerModal Ïª¥Ìè¨ÎÑåÌä∏Î°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§

    const handleShare = async () => {
        try {
            // Îî•ÎßÅÌÅ¨ URL ÏÉùÏÑ± (expo-routerÏùò Í≤ΩÏö∞)
            const shareUrl = `churchapp://teams/${id}`;
            const shareMessage = `${team?.name} Î™®ÏûÑÏóê Ï∞∏Ïó¨Ìï¥Î≥¥ÏÑ∏Ïöî!\n\n${shareUrl}`;

            const result = await Share.share({
                message: shareMessage,
                url: shareUrl,  // iOS only
            });

            if (result.action === Share.sharedAction) {
                if (result.activityType) {
                    showToast('ÎßÅÌÅ¨Í∞Ä Í≥µÏú†ÎêòÏóàÏäµÎãàÎã§');
                } else {
                    showToast('ÎßÅÌÅ¨Í∞Ä Í≥µÏú†ÎêòÏóàÏäµÎãàÎã§');
                }
            }
        } catch (error) {
            // Í≥µÏú† Ïã§Ìå® Ïãú ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨
            const shareUrl = `churchapp://teams/${id}`;
            await Clipboard.setStringAsync(shareUrl);
            showToast('ÎßÅÌÅ¨Í∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§');
        }
    };

    // handleVote Ìï®ÏàòÎäî VoteModal Ïª¥Ìè¨ÎÑåÌä∏Î°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§

    const VoteStatusBar = ({ status, count, total, color }: { status: string; count: number; total: number; color: string }) => (
        <View style={{ marginBottom: spacing.sm }}>
            <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 4 }}>
                <Text style={{ fontSize: font.caption, color: colors.text }}>{status}</Text>
                <Text style={{ fontSize: font.caption, color: colors.text }}>{count}Î™Ö</Text>
            </View>
            <View style={{
                height: 8,
                backgroundColor: colors.border,
                borderRadius: 4,
                overflow: 'hidden',
            }}>
                <View style={{
                    width: `${(count / (total || 1)) * 100}%`,
                    height: '100%',
                    backgroundColor: color,
                    borderRadius: 4,
                }} />
            </View>
        </View>
    );

    // handleUpdateLocation Ìï®ÏàòÎäî LocationModal Ïª¥Ìè¨ÎÑåÌä∏Î°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§

    if (loading) {
        return (
            <SafeAreaView style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: colors.background,
                paddingTop: Platform.OS === 'android' ? insets.top : 0,
            }}>
                <ActivityIndicator size="large" color={colors.primary} />
            </SafeAreaView>
        );
    }

    if (!team) {
        return (
            <SafeAreaView style={{
                flex: 1,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: colors.background,
                paddingTop: Platform.OS === 'android' ? insets.top : 0,
            }}>
                <Text style={{ color: colors.text }}>Î™®ÏûÑÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.</Text>
            </SafeAreaView>
        );
    }


    const handleEnterChat = async () => {
        const user = await getCurrentUser();
        if (!user?.email) return;

        try {
            const teamDocRef = doc(db, 'teams', team.id);
            const teamSnap = await getDoc(teamDocRef);

            if (!teamSnap.exists()) {
                showToast('ÌåÄ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
                return;
            }

            const teamData = teamSnap.data();
            const membersList: string[] = teamData.membersList || [];

            if (!membersList.includes(user.email)) {
                showToast('‚ö†Ô∏è ÌåÄ Î©§Î≤ÑÎßå Ï±ÑÌåÖÎ∞©Ïóê ÏûÖÏû•Ìï† Ïàò ÏûàÏäµÎãàÎã§.');
                return;
            }

            router.push({
                pathname: '/teams/chat/chat',
                params: {
                    id: team.id,
                    name: team.name, // ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞Îäî paramsÏóê Ìè¨Ìï®Îê®
                },
            });
        } catch (error) {
            console.error('Ï±ÑÌåÖÎ∞© ÏûÖÏû• Ïò§Î•ò:', error);
            showToast('‚ö†Ô∏è Ï±ÑÌåÖÎ∞© ÏûÖÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };

    const isFull = (team?.members ?? 0) >= (team?.capacity ?? 99);

    // const handleCategorySelect = (cat: { label: string; value: string }) => {
    //     setCategory(cat.label);
    //     setCategoryModalVisible(false);
    //     if (cat.value === '‚ú® Î∞òÏßùÏÜåÎ™®ÏûÑ') {
    //         setSparkleModalVisible(true);
    //     }
    // };

    return (
        <SafeAreaView style={{
            flex: 1,
            backgroundColor: colors.background,
            paddingTop: Platform.OS === 'android' ? insets.top : 0,
        }}>
            {/* Ìó§Îçî */}
            <View style={{
                flexDirection: 'row',
                alignItems: 'center',
                justifyContent: 'space-between',
                paddingHorizontal: 16,
                height: 56,
                borderBottomWidth: 1,
                borderBottomColor: colors.border,
                backgroundColor: colors.background,
            }}>
                {/* Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº */}
                <TouchableOpacity
                    onPress={() => router.back()}
                    style={{
                        padding: 8,
                        zIndex: 1,
                    }}
                >
                    <Ionicons name="arrow-back" size={24} color={colors.text} />
                </TouchableOpacity>

                {/* Î™®ÏûÑ Ïù¥Î¶Ñ */}
                <View style={{
                        position: 'absolute',
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0,
                    justifyContent: 'center',
                        alignItems: 'center',
                }}>
                    <Text style={{
                        fontSize: 25,
                        fontWeight: 'bold',
                        color: colors.text,
                    }} numberOfLines={1}>
                        {team?.name || 'ÌåÄ ÏÉÅÏÑ∏'}
                    </Text>
                </View>

                {/* Ïö∞Ï∏° Î≤ÑÌäº ÏòÅÏó≠ */}
                <View style={{
                    flexDirection: 'row',
                    gap: spacing.md,
                    zIndex: 1,
                }}>
                    <View style={{ alignItems: 'center' }}>
                        <TouchableOpacity
                            onPress={handleShare}
                            style={{ padding: 8 }}
                        >
                            <Ionicons name="share-outline" size={24} color={colors.text} />
                        </TouchableOpacity>
                        <Text style={{
                            fontSize: 10,
                            color: colors.subtext,
                            marginTop: -4,
                        }}>
                            Í≥µÏú†ÌïòÍ∏∞
                        </Text>
                    </View>
                        <View style={{ alignItems: 'center' }}>
                            <TouchableOpacity
                                onPress={handleEnterChat}
                                style={{ padding: 8, position: 'relative' }}
                            >
                                <Ionicons name="chatbubble-outline" size={24} color={colors.text} />
                            {chatBadgeCount > 0 && (
                                    <View style={{
                                    position: 'absolute',
                                        top: 6,
                                        right: 6,
                                        backgroundColor: colors.error,
                                        borderRadius: 8,
                                    minWidth: 16,
                                    height: 16,
                                    justifyContent: 'center',
                                    alignItems: 'center',
                                    }}>
                                        <Text style={{
                                            color: '#fff',
                                            fontSize: 10,
                                            fontWeight: 'bold',
                                        }}>
                                    {chatBadgeCount}
                                </Text>
                            </View>
                        )}
                        </TouchableOpacity>
                            <Text style={{
                                fontSize: 10,
                                color: colors.subtext,
                                marginTop: -4,
                            }}>
                                Ï±ÑÌåÖÎ∞©
                            </Text>
                        </View>
                </View>
            </View>

            <ScrollView
                contentContainerStyle={{
                    paddingHorizontal: spacing.lg,
                    paddingBottom: spacing.xl * 4,
                    gap: spacing.lg
                }}
                        refreshControl={
                            <RefreshControl
                                refreshing={refreshing}
                                onRefresh={fetchTeam}
                                tintColor={colors.primary}
                            />
                }
            >
                {/* ÌåÄ Ï†ïÎ≥¥ Ïπ¥Îìú */}
                <View style={{
                    backgroundColor: colors.surface,
                    borderRadius: radius.lg,
                    padding: spacing.lg,
                    // marginTop: spacing.lg,
                }}>
                    {/* Ïç∏ÎÑ§Ïùº Ïù¥ÎØ∏ÏßÄ */}
                    {team.thumbnail && (
                        <View style={{
                            marginBottom: spacing.md,
                            borderRadius: radius.lg,
                            overflow: 'hidden',
                            alignItems: 'center'
                        }}>
                            <Image
                                source={{ uri: team.thumbnail }}
                                style={{
                                    width: '50%',
                                    height: 120,
                                    borderRadius: radius.lg,
                                }}
                                resizeMode="cover"
                            />
                        </View>
                    )}

                    {/* ÌåÄ Ïù¥Î¶Ñ */}
                    <View style={{
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'space-between',
                        marginBottom: spacing.md,
                    }}>
                        <View style={{ flex: 1 }}>
                            <Text style={{
                                fontSize: font.heading,
                                fontWeight: 'bold',
                                color: colors.text,
                            }}>
                                {team.name}
                            </Text>
                            <Text style={{
                                fontSize: font.caption,
                                color: colors.primary,
                                fontWeight: '600',
                            }}>
                                {team.category}
                            </Text>
                            <Text style={{
                                fontSize: font.caption,
                                color: colors.subtext,
                                marginTop: 2,
                            }}>
                                Ïù∏Ïõê: {team.membersList?.length || 0} / {team.maxMembers === -1 ? 'Î¨¥Ï†úÌïú' : team.maxMembers}
                            </Text>
                            {team.category === '‚ú® Î∞òÏßùÏÜåÎ™®ÏûÑ' && (
                                <View style={{ marginTop: 8 }}>
                                    <Text style={{ fontSize: font.caption, color: colors.subtext }}>
                                        ‚è∞ ÏÜåÎ™®ÏûÑ ÎßåÎ£åÏùº: {
                                        team.expirationDate instanceof Timestamp
                                            ? team.expirationDate.toDate().toLocaleDateString()
                                            : new Date(team.expirationDate).toLocaleDateString()
                                    }
                                    </Text>
                                </View>
                            )}
                        </View>

                        {(isCreator || isSubLeader) && (
                            <TouchableOpacity
                                onPress={openEditModal}
                                style={{
                                    backgroundColor: colors.primary + '10',
                                    padding: spacing.sm,
                                    borderRadius: 20,
                                }}
                            >
                                <Ionicons name="pencil" size={16} color={colors.primary} />
                            </TouchableOpacity>
                        )}
                    </View>

                    {/* Íµ¨Î∂ÑÏÑ† */}
                    <View style={{
                        height: 1,
                        backgroundColor: colors.border,
                        marginBottom: spacing.md,
                    }} />

                    {/* Î™®ÏûÑÏû• Ï†ïÎ≥¥ */}
                    <View style={{
                        flexDirection: 'row',
                        alignItems: 'center',
                        marginBottom: spacing.md,
                        backgroundColor: colors.background,
                        padding: spacing.sm,
                        borderRadius: radius.md,
                    }}>
                        <View style={{
                            width: 36,
                            height: 36,
                            borderRadius: 18,
                            backgroundColor: colors.primary + '20',
                            justifyContent: 'center',
                            alignItems: 'center',
                            marginRight: spacing.sm,
                        }}>
                            <Text style={{ fontSize: 16 }}>üëë</Text>
                        </View>
                        <View style={{ flex: 1 }}>
                            <Text style={{
                                fontSize: font.body,
                                color: colors.text,
                                fontWeight: '600',
                            }}>
                                {team.leader}
                            </Text>
                            <Text style={{
                                fontSize: font.caption,
                                color: colors.subtext,
                            }}>
                                Î™®ÏûÑÏû•
                            </Text>
                        </View>
                    </View>

                    {/* Ïû•ÏÜå & ÏãúÍ∞Ñ Ï†ïÎ≥¥ */}
                    <View style={{
                        flexDirection: 'row',
                        marginBottom: spacing.md,
                        gap: spacing.sm,
                    }}>
                        <TouchableOpacity
                            onPress={() => isCreator && setLocationModalVisible(true)}
                            style={{
                                flex: 1,
                                flexDirection: 'row',
                                alignItems: 'center',
                                backgroundColor: colors.background,
                                padding: spacing.sm,
                                borderRadius: radius.md,
                                opacity: isCreator ? 1 : 0.8,
                            }}
                        >
                            <View style={{
                                width: 32,
                                height: 32,
                                borderRadius: 16,
                                backgroundColor: colors.primary + '20',
                                justifyContent: 'center',
                                alignItems: 'center',
                                marginRight: spacing.sm,
                            }}>
                                <Ionicons name="location-outline" size={16} color={colors.primary} />
                            </View>
                            <View>
                                <Text style={{
                                    fontSize: font.caption,
                                    color: colors.subtext,
                                    marginBottom: 2,
                                }}>
                                    Î™®ÏûÑ Ïû•ÏÜå
                                </Text>
                                <Text style={{
                                    fontSize: font.body,
                                    color: colors.text,
                                    fontWeight: '500',
                                }}>
                                    {team.location || 'ÎØ∏Ï†ï'}
                                </Text>
                            </View>
                            {isCreator && (
                                <Ionicons
                                    name="chevron-forward"
                                    size={16}
                                    color={colors.subtext}
                                    style={{ marginLeft: 'auto' }}
                                />
                            )}
                        </TouchableOpacity>
                    </View>

                    {/* ÏÑ§Î™Ö */}
                    {team.description && (
                        <View style={{
                            backgroundColor: colors.background,
                            padding: spacing.sm,
                            borderRadius: radius.md,
                            marginBottom: spacing.md,
                        }}>
                            <Text style={{
                                fontSize: font.caption,
                                color: colors.subtext,
                                marginBottom: 2,
                            }}>
                                Î™®ÏûÑ ÏÜåÍ∞ú
                            </Text>
                            <Text style={{
                                fontSize: font.body,
                                color: colors.text,
                                lineHeight: 20,
                            }}>
                                {team.description}
                            </Text>
                        </View>
                    )}

                    {/* Í∞ÄÏûÖ Ïã†Ï≤≠ Î≤ÑÌäº */}
                    {!isFull && !isCreator && !team.membersList?.includes(user.email) && (
                        <TouchableOpacity
                            onPress={alreadyRequested ? undefined : handleJoin}
                            disabled={isFull || alreadyRequested || team.isClosed === true}
                            style={{
                                backgroundColor: isFull || alreadyRequested || team.isClosed === true? colors.border : colors.primary,
                                paddingVertical: spacing.sm,
                                borderRadius: radius.md,
                                alignItems: 'center',
                                flexDirection: 'row',
                                justifyContent: 'center',
                                gap: spacing.xs,
                            }}
                        >
                            <Ionicons name="person-add-outline" size={18} color="#fff" />
                            <Text style={{ color: '#fff', fontSize: font.body, fontWeight: '600' }}>
                                {isFull || team.isClosed === true ? 'Î™®ÏßëÎßàÍ∞ê' : alreadyRequested ? 'Í∞ÄÏûÖ Ïã†Ï≤≠ ÏôÑÎ£å' : 'Í∞ÄÏûÖ Ïã†Ï≤≠'}
                            </Text>
                        </TouchableOpacity>
                    )}
                </View>

                {/* ÏùºÏ†ï Î∞è Ìà¨Ìëú ÏÑπÏÖò */}
                <View style={{
                    backgroundColor: colors.surface,
                    borderRadius: radius.lg,
                    padding: spacing.sm,
                    // marginTop: spacing.md,
                }}>
                    <View style={{
                        flexDirection: 'row',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                        marginBottom: spacing.sm,
                    }}>
                        <View style={{ flex: 1 }}>
                            <Text style={{
                                fontSize: font.body,
                                fontWeight: 'bold',
                                color: colors.text,
                            }}>
                                Îã§Ïùå Î™®ÏûÑ ÏùºÏ†ï
                            </Text>
                            {scheduleDate ? (
                                <Text style={{
                                    fontSize: font.body,
                                    color: colors.text,
                                    marginTop: 4,
                                }}>
                                    {scheduleDate} (D{(():any => {
                                    const today = new Date();
                                    const target = new Date(scheduleDate);
                                    const diff = Math.ceil((target.getTime() - today.setHours(0, 0, 0, 0)) / (1000 * 60 * 60 * 24));
                                    return diff >= 0 ? `-${diff}` : `+${Math.abs(diff)}`;
                                    })()})
                                </Text>
                            ) : (
                                <Text style={{
                                    fontSize: font.body,
                                    color: colors.subtext,
                                    marginTop: 4,
                                }}>
                                    ÏùºÏ†ï ÎØ∏Ï†ï
                                </Text>
                            )}
                        </View>
                        <View style={{ flexDirection: 'row', gap: spacing.sm }}>
                            {(isCreator || isSubLeader) && (
                                <TouchableOpacity
                                    onPress={() => setDatePickerVisible(true)}
                                    style={{
                                        backgroundColor: colors.primary + '20',
                                        paddingHorizontal: spacing.md,
                                        paddingVertical: spacing.sm,
                                        borderRadius: radius.md,
                                        flexDirection: 'row',
                                        alignItems: 'center',
                                        gap: 4,
                                    }}
                                >
                                    <Ionicons name="pencil" size={14} color={colors.primary} />
                                    <Text style={{ color: colors.primary, fontWeight: '600' }}>
                                        {scheduleDate ? 'ÏàòÏ†ï' : 'ÏùºÏ†ï Ï∂îÍ∞Ä'}
                                    </Text>
                                </TouchableOpacity>
                            )}
                            {team.membersList?.includes(user?.email) && scheduleDate && (
                                <TouchableOpacity
                                    onPress={() => {
                                        setShowVoteStatus(true);
                                        setVoteModalVisible(true);
                                    }}
                                    style={{
                                        backgroundColor: colors.primary + '20',
                                        paddingHorizontal: spacing.md,
                                        paddingVertical: spacing.sm,
                                        borderRadius: radius.md,
                                    }}
                                >
                                    <Text style={{ color: colors.primary, fontWeight: '600' }}>
                                        Ìà¨Ìëú ÌòÑÌô©
                                    </Text>
                                </TouchableOpacity>
                            )}
                        </View>
                    </View>

                    {scheduleDate && team.membersList?.includes(user?.email) && (
                        <View style={{ marginTop: spacing.sm }}>
                            {/* Í∞ÄÏû• ÎßéÏùÄ Ìà¨ÌëúÏôÄ Ï∞∏Ïó¨Ïú® ÌëúÏãú */}
                            <View style={{
                                flexDirection: 'row',
                                alignItems: 'center',
                                backgroundColor: colors.background,
                                padding: spacing.sm,
                                borderRadius: radius.md,
                                borderWidth: 1,
                                borderColor: colors.border,
                            }}>
                                <Text style={{
                                    fontSize: font.caption,
                                    color: colors.text,
                                    flex: 1,
                                }}>
                                    {(() => {
                                        // Ïù∏ÎùºÏù∏ÏúºÎ°ú Í≥ÑÏÇ∞
                                        const voteArray = Object.values(votes);
                                        const total = voteArray.length;
                                        const stats = {
                                            yes: voteArray.filter(v => v.status === 'yes').length,
                                            no: voteArray.filter(v => v.status === 'no').length,
                                            maybe: voteArray.filter(v => v.status === 'maybe').length,
                                            total
                                        };
                                        const maxVotes = Math.max(stats.yes, stats.no, stats.maybe);
                                        const totalMembers = team.membersList?.length || 0;
                                        const participationRate = Math.round((stats.total / totalMembers) * 100);

                                        // ÏµúÎã§ ÎìùÌëú Ìï≠Î™©Îì§ÏùÑ Ï∞æÏäµÎãàÎã§
                                        const topVotes = [];
                                        if (stats.yes === maxVotes) topVotes.push({ status: '‚úÖ Ï∞∏ÏÑù', count: stats.yes });
                                        if (stats.no === maxVotes) topVotes.push({ status: '‚ùå Î∂àÏ∞∏', count: stats.no });
                                        if (stats.maybe === maxVotes) topVotes.push({ status: 'ü§î ÎØ∏Ï†ï', count: stats.maybe });

                                        // ÎèôÎ•†Ïù∏ Í≤ΩÏö∞ Î™®Îëê ÌëúÏãú
                                        return topVotes.map(vote => `${vote.status} ${vote.count}Ìëú`).join(' / ');
                                    })()}
                                </Text>
                                <Text style={{
                                    fontSize: font.caption,
                                    color: colors.subtext,
                                }}>
                                    {(():any => {
                                        // Ïù∏ÎùºÏù∏ÏúºÎ°ú Í≥ÑÏÇ∞
                                        const voteArray = Object.values(votes);
                                        const total = voteArray.length;
                                        const stats = {
                                            yes: voteArray.filter(v => v.status === 'yes').length,
                                            no: voteArray.filter(v => v.status === 'no').length,
                                            maybe: voteArray.filter(v => v.status === 'maybe').length,
                                            total
                                        };
                                        const totalMembers = team.membersList?.length || 0;
                                        const participationRate = Math.round((stats.total / totalMembers) * 100);
                                        return `Ï∞∏Ïó¨Ïú® ${participationRate}%`;
                                    })()}
                                </Text>
                            </View>
                        </View>
                    )}
                </View>

                {/* Í≥µÏßÄÏÇ¨Ìï≠Ïù¥ ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå ÌëúÏãú */}
                {team.announcement && (
                    <View style={{
                        marginTop: spacing.lg,
                        padding: spacing.md,
                        backgroundColor: colors.primary + '10',
                        borderRadius: radius.md,
                        borderLeftWidth: 4,
                        borderLeftColor: colors.primary,
                    }}>
                        <Text style={{
                            fontSize: font.caption,
                            color: colors.primary,
                            fontWeight: '600',
                            marginBottom: 4,
                        }}>
                            Í≥µÏßÄÏÇ¨Ìï≠
                        </Text>
                        <Text style={{
                            fontSize: font.body,
                            color: colors.text,
                            lineHeight: 20,
                        }}>
                            {team.announcement}
                        </Text>
                </View>
                )}

                {/* Î™®ÏûÑ ÏàòÏ†ï Î™®Îã¨ */}
                <EditTeamModal
                  team={team}
                  visible={editModalVisible}
                  onClose={() => setEditModalVisible(false)}
                  fetchTeam={fetchTeam}
                  loadingAnimation={loadingAnimation}
                />

                <VoteModal
                  visible={isVoteModalVisible}
                  onClose={() => setVoteModalVisible(false)}
                  teamId={team.id}
                  scheduleDate={scheduleDate}
                  votes={votes}
                  myVote={myVote}
                  user={user}
                />

                <DatePickerModal
                  visible={isDatePickerVisible}
                  onClose={() => setDatePickerVisible(false)}
                  teamId={team.id}
                  teamName={team.name}
                  membersList={team.membersList || []}
                  leaderEmail={team.leaderEmail}
                  user={user}
                  onDateSelected={(date) => setScheduleDate(date)}
                />

                <LocationModal
                  visible={isLocationModalVisible}
                  onClose={() => setLocationModalVisible(false)}
                  teamId={team.id}
                  initialLocation={team.location}
                  onLocationUpdate={(location) => {
                    setTeam(prev => prev && {
                      ...prev,
                      location: location,
                    });
                  }}
                />

                {/* Î©§Î≤Ñ Î¶¨Ïä§Ìä∏ */}
                {memberUsers.length > 0 && (
                    <View style={{
                        backgroundColor: colors.surface,
                        borderRadius: radius.lg,
                        padding: spacing.lg,
                        marginBottom: spacing.sm,
                    }}>
                        <Text style={{
                            fontSize: font.body,
                            fontWeight: '600',
                            color: colors.text,
                            marginBottom: spacing.md,
                        }}>
                            üôã Ï∞∏Ïó¨Ïûê ({memberUsers.length}Î™Ö)
                        </Text>

                        {[...memberUsers]
                            .sort((a, b) => {
                                if (a.email === team.leaderEmail) return -1;
                                if (b.email === team.leaderEmail) return 1;
                                if (a.email === team.subLeaderEmail) return -1;
                                if (b.email === team.subLeaderEmail) return 1;
                                return 0;
                            })
                            .map((member) => (
                                <View
                                    key={member.email}
                                    style={{
                                        flexDirection: 'row',
                                        justifyContent: 'space-between',
                                        alignItems: 'center',
                                        marginBottom: spacing.sm,
                                    }}
                                >
                                    <View style={{ flexDirection: 'row', alignItems: 'center', flex: 1 }}>
                                        <Text style={{
                                            color: member.email === team.leaderEmail ? colors.primary :
                                                  member.email === team.subLeaderEmail ? colors.primary : colors.text,
                                            fontWeight: (member.email === team.leaderEmail || member.email === team.subLeaderEmail) ? 'bold' : 'normal',
                                            fontSize: font.body,
                                        }}>
                                            {member.email === team.leaderEmail && 'üëë '}
                                            {member.email === team.subLeaderEmail && 'üëÆ '}
                                            {member.name}
                                        </Text>
                                        <Text style={{
                                            fontSize: font.caption,
                                            color: colors.subtext,
                                            marginLeft: spacing.sm,
                                        }}>
                                            {member.email === team.leaderEmail ? '(Î™®ÏûÑÏû•)' :
                                             member.email === team.subLeaderEmail ? '(Î∂ÄÎ™®ÏûÑÏû•)' : ''}
                                        </Text>
                                    </View>

                                    {/* ÏÑ§Ï†ï Î≤ÑÌäº */}
                                    {isManager && member.email !== user.email && (
                                        <TouchableOpacity
                                            onPress={() => {
                                                // Î∂ÄÎ™®ÏûÑÏû•ÏùÄ Î™®ÏûÑÏû•ÏùÑ Í¥ÄÎ¶¨Ìï† Ïàò ÏóÜÏùå
                                                if (isSubLeader && member.email === team.leaderEmail) {
                                                    return;
                                                }

                                                // Î∂ÄÎ™®ÏûÑÏû•ÏùÄ Îã§Î•∏ Î∂ÄÎ™®ÏûÑÏû•ÏùÑ Í¥ÄÎ¶¨Ìï† Ïàò ÏóÜÏùå
                                                if (isSubLeader && member.email === team.subLeaderEmail) {
                                                    return;
                                                }

                                                Alert.alert(
                                                    'Î©§Î≤Ñ Í¥ÄÎ¶¨',
                                                    `${member.name}ÎãòÏùÑ Ïñ¥ÎñªÍ≤å ÌïòÏãúÍ≤†ÏäµÎãàÍπå?`,
                                                    [
                                                        { text: 'Ï∑®ÏÜå', style: 'cancel' },
                                                        // Î∂ÄÎ™®ÏûÑÏû• ÏûÑÎ™Ö/Ìï¥Ï†úÎäî Î™®ÏûÑÏû•Îßå Í∞ÄÎä•
                                                        ...(isCreator ? [{
                                                            text: member.email === team.subLeaderEmail ? 'Î∂ÄÎ™®ÏûÑÏû• Ìï¥Ï†ú' : 'Î∂ÄÎ™®ÏûÑÏû• ÏûÑÎ™Ö',
                                                            onPress: async () => {
                                                                try {
                                                                    const teamRef = doc(db, 'teams', team.id);
                                                                    if (member.email === team.subLeaderEmail) {
                                                                        await updateDoc(teamRef, {
                                                                            subLeaderEmail: null
                                                                        });
                                                                        showToast('‚úÖ Î∂ÄÎ™®ÏûÑÏû•Ïù¥ Ìï¥Ï†úÎêòÏóàÏäµÎãàÎã§.');
                                                                    } else {
                                                                        await updateDoc(teamRef, {
                                                                            subLeaderEmail: member.email
                                                                        });
                                                                        showToast('‚úÖ Î∂ÄÎ™®ÏûÑÏû•Ïù¥ ÏûÑÎ™ÖÎêòÏóàÏäµÎãàÎã§.');
                                                                    }
                                                                } catch (e) {
                                                                    console.error('‚ùå Î∂ÄÎ™®ÏûÑÏû• ÏÑ§Ï†ï Ïã§Ìå®:', e);
                                                                    showToast('‚ö†Ô∏è Î∂ÄÎ™®ÏûÑÏû• ÏÑ§Ï†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                                                                }
                                                            }
                                                        }] : []),
                                                        // ÏùºÎ∞ò Î©§Î≤Ñ Í∞ïÌá¥Îäî Î™®ÏûÑÏû•Í≥º Î∂ÄÎ™®ÏûÑÏû• Î™®Îëê Í∞ÄÎä•
                                                        {
                                                            text: 'Í∞ïÌá¥',
                                                            style: 'destructive',
                                                            onPress: () => handleKick(member.email)
                                                        }
                                                    ]
                                                );
                                            }}
                                            style={{
                                                padding: spacing.sm,
                                            }}
                                        >
                                            <Ionicons name="ellipsis-vertical" size={20} color={colors.subtext} />
                                        </TouchableOpacity>
                                    )}
                                </View>
                            ))}

                        {/* ÌÉàÌá¥ÌïòÍ∏∞ Î≤ÑÌäº (Î™®ÏûÑÏû•Ïù¥ ÏïÑÎãå Î©§Î≤ÑÎßå Î≥¥ÏûÑ) */}
                        {!isCreator && team.membersList?.includes(user?.email) && (
                            <TouchableOpacity
                                onPress={() => {
                                    Alert.alert(
                                        'Î™®ÏûÑ ÌÉàÌá¥',
                                        'Ï†ïÎßê Î™®ÏûÑÏùÑ ÌÉàÌá¥ÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
                                        [
                                            { text: 'Ï∑®ÏÜå', style: 'cancel' },
                                            {
                                                text: 'ÌÉàÌá¥',
                                                style: 'destructive',
                                                onPress: async () => {
                                                    try {
                                                        const teamRef = doc(db, 'teams', team.id);
                                                        await updateDoc(teamRef, {
                                                            membersList: arrayRemove(user.email),
                                                            members: increment(-1),
                                                        });
                                                        showToast('‚úÖ Î™®ÏûÑÏóêÏÑú ÌÉàÌá¥ÌñàÏäµÎãàÎã§.');
                                                        router.back();
                                                    } catch (error) {
                                                        console.error('ÌÉàÌá¥ Ïã§Ìå®:', error);
                                                        showToast('‚ö†Ô∏è ÌÉàÌá¥Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                                                    }
                                                },
                                            },
                                        ]
                                    );
                                }}
                                style={{
                                    marginTop: spacing.md,
                                    paddingVertical: spacing.sm,
                                    borderRadius: radius.md,
                                    alignItems: 'center',
                                    backgroundColor: colors.error + '10',
                                }}
                            >
                                <Text style={{ color: colors.error, fontSize: font.body }}>
                                    Î™®ÏûÑ ÌÉàÌá¥ÌïòÍ∏∞
                                </Text>
                            </TouchableOpacity>
                        )}

                        {/* Î™®ÏûÑÏû• ÌÉàÌá¥ Î≤ÑÌäº */}
                        {isCreator && (
                            <TouchableOpacity
                                onPress={() => {
                                    Alert.alert(
                                        'Î™®ÏûÑÏû• ÌÉàÌá¥',
                                        'Î™®ÏûÑÏû•Ïù¥ ÌÉàÌá¥ÌïòÎ©¥ Î™®ÏûÑÏù¥ ÏûêÎèôÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§.\nÏ†ïÎßê ÌÉàÌá¥ÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
                                        [
                                            { text: 'Ï∑®ÏÜå', style: 'cancel' },
                                            {
                                                text: 'ÌÉàÌá¥ Î∞è Î™®ÏûÑ ÏÇ≠Ï†ú',
                                                style: 'destructive',
                                                onPress: async () => {
                                                    try {
                                                        // 1. Î™®Îì† Î©§Î≤ÑÏóêÍ≤å ÏïåÎ¶º Î≥¥ÎÇ¥Í∏∞
                                                        const memberEmails = team.membersList.filter(email => email !== user.email);
                                                        const notificationPromises = memberEmails.map(email =>
                                                            sendNotification({
                                                                to: email,
                                                                message: `"${team.name}" Î™®ÏûÑÏù¥ Î™®ÏûÑÏû•Ïùò ÌÉàÌá¥Î°ú Ïù∏Ìï¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`,
                                                                type: 'team_deleted',
                                                                teamName: team.name,
                                                            })
                                                        );

                                                        // 2. Ìë∏Ïãú ÏïåÎ¶º Î≥¥ÎÇ¥Í∏∞
                                                        const tokenQueryBatches = [];
                                                        const emailClone = [...memberEmails];
                                                        while (emailClone.length) {
                                                            const batch = emailClone.splice(0, 10);
                                                            tokenQueryBatches.push(
                                                                query(collection(db, 'expoTokens'), where('email', 'in', batch))
                                                            );
                                                        }

                                                        const tokenSnapshots = await Promise.all(tokenQueryBatches.map(q => getDocs(q)));
                                                        const tokens = tokenSnapshots.flatMap(snap =>
                                                            snap.docs.map(doc => doc.data().token).filter(Boolean)
                                                        );

                                                        if (tokens.length > 0) {
                                                            await sendPushNotification({
                                                                to: tokens,
                                                                title: 'Î™®ÏûÑ ÏÇ≠Ï†ú ÏïåÎ¶º',
                                                                body: `"${team.name}" Î™®ÏûÑÏù¥ Î™®ÏûÑÏû•Ïùò ÌÉàÌá¥Î°ú Ïù∏Ìï¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`,
                                                            });
                                                        }

                                                        // 3. Î™®ÏûÑ ÏÇ≠Ï†ú
                                                        await deleteDoc(doc(db, 'teams', team.id));

                                                        showToast('‚úÖ Î™®ÏûÑÏóêÏÑú ÌÉàÌá¥ÌñàÏäµÎãàÎã§.');
                                                        router.replace('/teams');
                                                    } catch (error) {
                                                        console.error('Î™®ÏûÑÏû• ÌÉàÌá¥ Ïã§Ìå®:', error);
                                                        showToast('‚ö†Ô∏è ÌÉàÌá¥Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                                                    }
                                                },
                                            },
                                        ]
                                    );
                                }}
                                style={{
                                    marginTop: spacing.md,
                                    paddingVertical: spacing.sm,
                                    borderRadius: radius.md,
                                    alignItems: 'center',
                                    backgroundColor: colors.error + '10',
                                }}
                            >
                                <Text style={{ color: colors.error, fontSize: font.body }}>
                                    Î™®ÏûÑÏû• ÌÉàÌá¥ÌïòÍ∏∞
                                </Text>
                            </TouchableOpacity>
                        )}
                    </View>
                )}

                {/* ÌïòÎã® Î≤ÑÌäº ÏòÅÏó≠ */}
                <View style={{ gap: spacing.md }}>
                    {/* Í¥ÄÎ¶¨Ïûê Î≤ÑÌäº */}
                    {isManager && (
                        <>
                        <TouchableOpacity
                            onPress={openEditModal}
                            style={{
                                backgroundColor: colors.primary,
                                paddingVertical: spacing.md,
                                borderRadius: radius.md,
                                alignItems: 'center',
                            }}
                        >
                            <Text style={{ color: '#fff', fontSize: font.body, fontWeight: 'bold' }}>
                                ‚úèÔ∏è Î™®ÏûÑ Ï†ïÎ≥¥ ÏàòÏ†ï
                            </Text>
                        </TouchableOpacity>

                        {isCreator && (
                            <TouchableOpacity
                                onPress={() => deleteTeam(team.id)}
                                style={{
                                    backgroundColor: colors.error,
                                    paddingVertical: spacing.md,
                                    borderRadius: radius.md,
                                    alignItems: 'center',
                                }}
                            >
                                <Text style={{ color: '#fff', fontSize: font.body, fontWeight: 'bold' }}>
                                    üóëÔ∏è Î™®ÏûÑ ÏÇ≠Ï†úÌïòÍ∏∞
                                </Text>
                            </TouchableOpacity>
                        )}
                        </>
                    )}

                    {/* Í∞ÄÏûÖ Ïã†Ï≤≠ Î≤ÑÌäº */}
                    {!isFull && !isCreator && !team.membersList?.includes(user.email) && (
                        <TouchableOpacity
                            onPress={alreadyRequested ? undefined : handleJoin}
                            disabled={isFull || alreadyRequested}
                            style={{
                                backgroundColor: isFull || alreadyRequested ? colors.border : colors.primary,
                                paddingVertical: spacing.md,
                                borderRadius: radius.md,
                                alignItems: 'center',
                            }}
                        >
                            <Text style={{ color: '#fff', fontSize: font.body, fontWeight: '600' }}>
                                {isFull ? 'Î™®ÏßëÎßàÍ∞ê' : alreadyRequested ? 'Í∞ÄÏûÖ Ïã†Ï≤≠ ÏôÑÎ£å' : 'Í∞ÄÏûÖ Ïã†Ï≤≠ÌïòÍ∏∞'}
                            </Text>
                        </TouchableOpacity>
                    )}
                </View>
            </ScrollView>
        </SafeAreaView>
    );
}
